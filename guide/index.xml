<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on Tendermint</title>
    <link>http://tendermint.com/guide/</link>
    <description>Recent content in Guides on Tendermint</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 16 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tendermint.com/guide/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Launch a TMSP testnet using mintnet</title>
      <link>http://tendermint.com/guide/launch-a-tmsp-testnet/</link>
      <pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/guide/launch-a-tmsp-testnet/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;This tutorial is second in a series.  See &lt;a href=&#34;http://tendermint.com/posts/tendermint-socket-protocol/&#34;&gt;this post&lt;/a&gt; for links to all the tutorials in this series.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;tendermint-core&#34;&gt;Tendermint Core&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve seen how TMSP works, and even played with a few applications using the &lt;code&gt;tmsp-cli&lt;/code&gt; tool,
let&amp;rsquo;s run an actual Tendermint node.&lt;/p&gt;

&lt;p&gt;When running a live application, a Tendermint node takes the place of the &lt;code&gt;tmsp-cli&lt;/code&gt; tool by sending TMSP requests
to the application: many &lt;code&gt;append_tx&lt;/code&gt; msgs to run transactions followed by a &lt;code&gt;commit&lt;/code&gt; to get the application Merkle root hash, and so on.&lt;/p&gt;

&lt;p&gt;Installing Tendermint is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/tendermint/tendermint/cmd/tendermint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you already have Tendermint installed, then you can either set a new &lt;code&gt;$GOPATH&lt;/code&gt; and run the previous command,
or else fetch and checkout the latest master branch in &lt;code&gt;$GOPATH/src/github.com/tendermint/tendermint&lt;/code&gt;,
and from that directory run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get ./cmd/tendermint
go install ./cmd/tendermint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To initialize a genesis and validator key in &lt;code&gt;~/.tendermint&lt;/code&gt;, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tendermint init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can change the directory by setting the &lt;code&gt;$TMROOT&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;Now,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tendermint node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see &lt;code&gt;Failed to connect to proxy for mempool: dial tcp 127.0.0.1:46658: getsockopt: connection refused&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s because we don&amp;rsquo;t have an application process running, and Tendermint will only run if there&amp;rsquo;s an application it can speak TMSP with.&lt;/p&gt;

&lt;p&gt;So lets start the &lt;code&gt;dummy&lt;/code&gt; app,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dummy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in another window, start Tendermint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tendermint node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a few seconds you should see blocks start streaming in!&lt;/p&gt;

&lt;p&gt;Now you can send transactions through the Tendermint RPC server with curl requests, or from your browser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:46657/broadcast_tx?tx=\&amp;quot;abcd\&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For handling responses, we recommend you &lt;a href=&#34;http://jmhodges.github.io/jsonpp/&#34;&gt;install the &lt;code&gt;jsonpp&lt;/code&gt; tool&lt;/a&gt; to pretty print the JSON&lt;/p&gt;

&lt;p&gt;We can see the chain&amp;rsquo;s status at the &lt;code&gt;/status&lt;/code&gt; end-point:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:46657/status |  jsonpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the &lt;code&gt;latest_app_hash&lt;/code&gt; in particular:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:46657/status |  jsonpp | grep app_hash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;visit &lt;a href=&#34;http://localhost:46657&#34;&gt;http://localhost:46657&lt;/a&gt; in your browser to see the other endpoints.&lt;/p&gt;

&lt;h2 id=&#34;deploy-a-tendermint-testnet&#34;&gt;Deploy a Tendermint Testnet&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve run a single Tendermint node with one validator and a couple applications,
let&amp;rsquo;s deploy a testnet to run our application with four validators.&lt;/p&gt;

&lt;p&gt;For this part of the tutorial, we assume you have an account at digital ocean and are willing to
pay to start some new droplets to run your nodes. You can of course stop and destroy them at any time.&lt;/p&gt;

&lt;p&gt;First, install &lt;a href=&#34;https://docs.docker.com/machine/install-machine/&#34;&gt;&lt;code&gt;docker-machine&lt;/code&gt;&lt;/a&gt; and get a DigitalOcean account and access token.&lt;/p&gt;

&lt;p&gt;Then, install &lt;code&gt;mintnet&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/tendermint/mintnet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To provision machines on DigitalOcean:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mintnet create -- --driver=digitalocean --digitalocean-image=docker --digitalocean-access-token=YOUR_ACCCESS_TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can leave out the &lt;code&gt;--digitalocean-access-token&lt;/code&gt; flag if you set your &lt;code&gt;DIGITALOCEAN_ACCESS_TOKEN&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;By default this creates 4 new machines.  Check the help messages for more info, e.g. &lt;code&gt;mintnet create --help&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, create the testnet configuration folders.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mintnet init chain mytest_dir/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates directories in &lt;code&gt;mytest&lt;/code&gt; for the application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls mytest_dir/
  chain_config.json # list of validator pubkeys and ip:ports
  app   # Common configuration directory for your blockchain applicaiton
  core  # Common configuration directory for Tendermint core
  data  # Common configuration directory for the Merkleyes key-value store
  mach1 # Configuration directory for the Tendermint core daemon on machine 1
  mach2 # Configuration directory for the Tendermint core daemon on machine 2
  mach3 # Configuration directory for the Tendermint core daemon on machine 3
  mach4 # Configuration directory for the Tendermint core daemon on machine 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can change the files in the app folder to change which TMSP application run on your testnet.
The default script app/init.sh gets run on each node to install the TMSP application straight from Github.
Edit core/init.sh to change the Tendermint version being run.&lt;/p&gt;

&lt;p&gt;Now start the testnet service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mintnet start mytest mytest_dir/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can stop and remove the application as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mintnet stop mytest; mintnet rm mytest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to destroy your provisioned machines!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mintnet destroy --machines=&amp;quot;mach1,mach2,mach3,mach4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note you can use the &lt;code&gt;--machines&lt;/code&gt; flag on any command to specify machines,
for instance &lt;code&gt;--machines mach[1-3],mach7&lt;/code&gt; will apply to mach1, mach2, mach3, and mach7.&lt;/p&gt;

&lt;p&gt;TODO: Document tutorial on docker-machine ssh mach1, docker ps, etc, or at least link to good Docker tutorials.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run your first TMSP application</title>
      <link>http://tendermint.com/guide/run-your-first-tmsp-application/</link>
      <pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/guide/run-your-first-tmsp-application/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;This tutorial is first in a series.  See &lt;a href=&#34;http://tendermint.com/posts/tendermint-socket-protocol/&#34;&gt;this post&lt;/a&gt; for an overview of TMSP and links to all the tutorials in this series.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;a-first-example&#34;&gt;A First Example&lt;/h2&gt;

&lt;p&gt;Make sure you &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;have Go installed&lt;/a&gt; and &lt;a href=&#34;https://github.com/tendermint/tendermint/wiki/Setting-GOPATH&#34;&gt;put &lt;code&gt;$GOPATH/bin&lt;/code&gt; in your &lt;code&gt;$PATH&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, install the &lt;code&gt;tmsp-cli&lt;/code&gt; tool and example applications:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u github.com/tendermint/tmsp/cmd/...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;code&gt;tmsp-cli --help&lt;/code&gt; to see the list of commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COMMANDS:
   batch        Run a batch of TMSP commands against an application
   console      Start an interactive console for multiple commands
   echo         Have the application echo a message
   info         Get some info about the application
   set_option   Set an option on the application
   append_tx    Append a new tx to application
   check_tx     Validate a tx
   commit       Get application Merkle root hash
   help, h      Shows a list of commands or help for one command
   
GLOBAL OPTIONS:
   --address &amp;quot;tcp://127.0.0.1:46658&amp;quot;    address of application socket
   --help, -h                           show help
   --version, -v                        print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;tmsp-cli&lt;/code&gt; tool lets us send TMSP messages to our application, to help build and debug them.&lt;/p&gt;

&lt;p&gt;The most important messages are &lt;code&gt;append_tx&lt;/code&gt;, &lt;code&gt;check_tx&lt;/code&gt;, and &lt;code&gt;commit&lt;/code&gt;,
but there are others for convenience, configuration, and information purposes.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start a dummy application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dummy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In another terminal, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tmsp-cli echo hello
tmsp-cli info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The application should echo &lt;code&gt;hello&lt;/code&gt; and give you some information about itself.&lt;/p&gt;

&lt;p&gt;A TMSP application must provide two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a socket server&lt;/li&gt;
&lt;li&gt;a handler for TMSP messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we run the &lt;code&gt;tmsp-cli&lt;/code&gt; tool we open a new connection to the application&amp;rsquo;s socket server,
send the given TMSP message, and wait for a response.&lt;/p&gt;

&lt;p&gt;The server may be generic for a particular language, and we provide one for Go in &lt;code&gt;tmsp/server&lt;/code&gt;.
There is one for Python in &lt;code&gt;example/python/tmsp/server.py&lt;/code&gt;, and one for Node JS in &lt;code&gt;github.com/tendermint/js-tmsp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The handler is specific to the application, and may be arbitrary,
so long as it is deterministic and conforms to the TMSP interface specification.&lt;/p&gt;

&lt;p&gt;For example, starting the &lt;code&gt;dummy&lt;/code&gt; application in Go looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;server.StartListener(&amp;quot;tcp://0.0.0.0:46658&amp;quot;, example.NewDummyApplication())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;example.NewDummyApplication()&lt;/code&gt; has methods for each of the TMSP messages and &lt;code&gt;server&lt;/code&gt; handles everything else.&lt;/p&gt;

&lt;p&gt;See the dummy app in &lt;code&gt;example/golang/dummy.go&lt;/code&gt;. It simply adds transaction bytes to a Merkle tree, and hashes when we call &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So when we run &lt;code&gt;tmsp-cli info&lt;/code&gt;, we open a new connection to the TMSP server, which calls the &lt;code&gt;Info()&lt;/code&gt; method on the application, which tells us the number of transactions in our Merkle tree.&lt;/p&gt;

&lt;p&gt;Now, since every command opens a new connection, we provide the &lt;code&gt;tmsp-cli console&lt;/code&gt; and &lt;code&gt;tmsp-cli batch&lt;/code&gt; commands,
to allow multiple TMSP messages to be sent over a single connection.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;tmsp-cli console&lt;/code&gt; should drop you in an interactive console for speaking TMSP messages to your application.&lt;/p&gt;

&lt;p&gt;Try running these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; echo hello
-&amp;gt; data: {hello}

&amp;gt; info 
-&amp;gt; data: {size:0}

&amp;gt; commit 

&amp;gt; append_tx abc
-&amp;gt; code: OK

&amp;gt; info 
-&amp;gt; data: {size:1}

&amp;gt; commit 
-&amp;gt; data: {750502FC7E84BBD788ED589624F06CFA871845D1}

&amp;gt; query abc
-&amp;gt; code: OK
-&amp;gt; data: {Index=0 value=abc exists=true}

&amp;gt; append_tx def=xyz
-&amp;gt; code: OK

&amp;gt; commit 
-&amp;gt; data: {76393B8A182E450286B0694C629ECB51B286EFD5}

&amp;gt; query def
-&amp;gt; code: OK
-&amp;gt; data: {Index=1 value=xyz exists=true}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if we do &lt;code&gt;append_tx abc&lt;/code&gt; it will store &lt;code&gt;(abc, abc)&lt;/code&gt;,
but if we do &lt;code&gt;append_tx abc=efg&lt;/code&gt; it will store &lt;code&gt;(abc, efg)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, you could put the commands in a file and run &lt;code&gt;tmsp-cli --verbose batch &amp;lt; myfile&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;another-example&#34;&gt;Another Example&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got the hang of it, let&amp;rsquo;s try another application, the &amp;ldquo;counter&amp;rdquo; app.&lt;/p&gt;

&lt;p&gt;The counter app doesn&amp;rsquo;t use a Merkle tree, it just counts how many times we&amp;rsquo;ve sent a transaction,
asked for a hash, or committed the state. The result of &lt;code&gt;commit&lt;/code&gt; is just the number of transactions sent.&lt;/p&gt;

&lt;p&gt;This application has two modes: &lt;code&gt;serial=off&lt;/code&gt; and &lt;code&gt;serial=on&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;serial=on&lt;/code&gt;, transactions must be a big-endian encoded incrementing integer, starting at 0.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;serial=off&lt;/code&gt;, there are no restrictions on transactions.&lt;/p&gt;

&lt;p&gt;We can toggle the value of &lt;code&gt;serial&lt;/code&gt; using the &lt;code&gt;set_option&lt;/code&gt; TMSP message.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;serial=on&lt;/code&gt;, some transactions are invalid.
In a live blockchain, transactions collect in memory before they are committed into blocks.
To avoid wasting resources on invalid transactions,
TMSP provides the &lt;code&gt;check_tx&lt;/code&gt; message,
which application developers can use to accept or reject messages,
before they are stored in memory or gossipped to other peers.&lt;/p&gt;

&lt;p&gt;In this instance of the counter app, &lt;code&gt;check_tx&lt;/code&gt; only allows transactions whose integer is greater than the last committed one.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s kill the console and the dummy application, and start the counter app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;counter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, the code is just&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;server.StartListener(&amp;quot;tcp://0.0.0.0:46658&amp;quot;, example.NewCounterApplication())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the CounterApplication is defined in &lt;code&gt;example/golang/counter.go&lt;/code&gt;, and implements the TMSP application interface.&lt;/p&gt;

&lt;p&gt;In another window, start the &lt;code&gt;tmsp-cli console&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set_option serial on
-&amp;gt; data: {serial=on}

&amp;gt; check_tx 0x00
-&amp;gt; code: OK

&amp;gt; check_tx 0xff
-&amp;gt; code: OK

&amp;gt; append_tx 0x00
-&amp;gt; code: OK

&amp;gt; check_tx 0x00
-&amp;gt; code: BadNonce
-&amp;gt; log: Invalid nonce. Expected &amp;gt;= 1, got 0

&amp;gt; append_tx 0x01
-&amp;gt; code: OK

&amp;gt; append_tx 0x04
-&amp;gt; code: BadNonce
-&amp;gt; log: Invalid nonce. Expected 2, got 4

&amp;gt; info 
-&amp;gt; data: {hashes:0, txs:2}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very simple application, but between &lt;code&gt;counter&lt;/code&gt; and &lt;code&gt;dummy&lt;/code&gt;, its easy to see how you can build out arbitrary application states on top of the TMSP.
In the near future, &lt;code&gt;erisdb&lt;/code&gt; of Eris Industries will also run atop TMSP, bringing with it Ethereum-like accounts, the Ethereum virtual-machine, Eris&amp;rsquo;s permissioning scheme, and native contracts extensions.&lt;/p&gt;

&lt;p&gt;But the ultimate flexibility comes from being able to write the application easily in any language.&lt;/p&gt;

&lt;p&gt;We have implemented the counter in a number of languages (see the example directory).&lt;/p&gt;

&lt;p&gt;To run the Node JS version, &lt;code&gt;cd&lt;/code&gt; to &lt;code&gt;example/js&lt;/code&gt; and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(you&amp;rsquo;ll have to kill the other counter application process).
In another window, run the console and those previous TMSP commands.
You should get the same results as for the Go version.&lt;/p&gt;

&lt;p&gt;Want to write the counter app in your favorite language?! We&amp;rsquo;d be happy to accept the pull request!&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;In the next tutorial, we will show how to &lt;a href=&#34;http://tendermint.com/tutorials/launch-a-tmsp-testnet&#34;&gt;launch a TMSP testnet&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>